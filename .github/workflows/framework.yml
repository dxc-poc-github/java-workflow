name: Java AKS Maven Workflow
on: 
  workflow_call:
    inputs:
      JAVA_VERSION:
        type: string 
        description: Java Version
        required: true
        default: '11'
      APP_NAME:
        type: string 
        description: APP_NAME
        required: false
        default: ''        
      MAVEN_OPTS:
        type: string 
        description: MAVEN_OPTS
        required: false
        default: ''
      MAVEN_GOALS:
        type: string 
        description: Maven Goals
        required: false
        default: ''
      MAVEN_POM_FILE:
        type: string 
        description: Maven POM File
        required: false
        default: ''
      ARTIFACTORY_USERNAME:
        type: string 
        description: ARTIFACTORY USER NAME
        required: false
        default: ''
      ARTIFACTORY_SETTINGS_XML_URL:
        type: string 
        description: ARTIFACTORY Settings XML Url
        required: false
        default: '' 
      ARTIFACTORY_PUBLISHER_USERNAME:
        type: string 
        description: ARTIFACTORY Settings XML Url
        required: false
        default: ''         
      ACR_REGISTRY_NAME:
        required: false
        type: string         
      perform_unit_test:
        type: boolean 
        description: Junit Test
        default: True
      perform_integration_test:
        type: boolean 
        description: Integration Test
        default: False  
      perform_deploy:
        type: boolean 
        description: Deploy
        default: False 
      perform_docker_build:
        type: boolean 
        description: Deploy
        default: False         
      advanceSecurityEnabled:
        type: boolean 
        description: GitHub Advanced Security
        default: False        
    secrets:
      CODEQL_TOKEN:
        required: false 
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      ARTIFACTORY_PASSWORD:
        required: false
      ARTIFACTORY_PUBLISHER_PASSWORD:
        required: false
jobs:
  mvn-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ inputs.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.JAVA_VERSION }}'
          distribution: 'temurin'
          cache: maven
      - name: Download Settings XML
        if: ${{ inputs.ARTIFACTORY_SETTINGS_XML_URL }} && ${{ inputs.ARTIFACTORY_USERNAME }}
        run: |
          echo "Download started.."
          if [[ -f ${{ github.repository }}/settings.xml ]]
          then 
            echo "settings.xml already exists"
          else
            echo "downloading settings.xml from Artifactory"
            echo "downloading settings.xml from Artifactory"
            curl -u ${{ inputs.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }} -o ${{ github.repository }}/settings.xml ${{ inputs.ARTIFACTORY_SETTINGS_XML_URL }}
          fi
          echo "download completed"
      - name: Maven Build
        if: always()
        run: mvn --batch-mode --update-snapshots install
      - name: 'Dependency Review'
        if: ${{ inputs.advanceSecurityEnabled }}
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.jar'                
  test:
    runs-on: ubuntu-latest
    needs: mvn-build
    if: ${{ inputs.perform_unit_test }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ inputs.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.JAVA_VERSION }}'
          distribution: 'temurin'
      - name: Junit Test
        run: mvn --batch-mode --update-snapshots test
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files:
            target/surefire-reports/*.xml
          check_name: 'Test Results'
  integration-test:
    runs-on: ubuntu-latest
    needs: mvn-build
    if: ${{ inputs.perform_integration_test }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ inputs.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.JAVA_VERSION }}'
          distribution: 'temurin'
      - name: Junit Integration Test
        run: mvn --batch-mode --update-snapshots verify
      - name: Publish Integration Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files:
            target/surefire-reports/*.xml            
          check_name: 'Integration Test Results'
  codeql-dependabot-report:
    runs-on: ubuntu-latest
    needs: mvn-build
    if: ${{ inputs.advanceSecurityEnabled }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      - name: Generate Security Report
        #uses: peter-murray/github-security-report-action@v2
        uses: rsdmike/github-security-report-action@v3.0.4
        with:
          token: ${{ secrets.CODEQL_TOKEN }}  
          sarifReportDir: "../results"
          outputDir: ${{ github.workspace }}
          repository: ${{ github.repository }}
      - name: Upload Security Report
        uses: actions/upload-artifact@v2
        with:
          name: security-report
          path: '${{ github.workspace }}/*.pdf'
  docker-image-build-push:
    # Environment variables available to all jobs and steps in this workflow
    env:
      REGISTRY_NAME: '${{ inputs.ACR_REGISTRY_NAME }}'
    runs-on: ubuntu-latest
    needs:
      - mvn-build
    if: ${{ inputs.perform_docker_build }}  
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Docker Login (Connect to Azure Container registry (ACR))
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.DOCKER_USERNAME }} 
        #username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.DOCKER_PASSWORD }}
       #password: ${{ secrets.REGISTRY_PASSWORD }}
    - name: Container build and push to a Azure Container registry (ACR)
      run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}          
  deploy:
    runs-on: ubuntu-latest
    needs:
      - mvn-build
      - test
    if: ${{ inputs.perform_deploy }}    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: java-app
      - name: deploy
        run: echo "Done - bye!"
#      - name: Deploy to Azure Web App
#        id: deploy-to-webapp
#        uses: azure/webapps-deploy@v2
#        with:
#          app-name: 'sampleapp-githubactions'
#          slot-name: 'Production'
#          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
#          package: '/home/runner/work/java_app/java_app'
